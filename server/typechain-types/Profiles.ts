/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace Profiles {
  export type FeeStruct = { doc: string; cost: BigNumberish };

  export type FeeStructOutput = [string, BigNumber] & {
    doc: string;
    cost: BigNumber;
  };

  export type ProfileStruct = {
    displayName: string;
    email: string;
    photoURL: string;
    fees: Profiles.FeeStruct[];
  };

  export type ProfileStructOutput = [
    string,
    string,
    string,
    Profiles.FeeStructOutput[]
  ] & {
    displayName: string;
    email: string;
    photoURL: string;
    fees: Profiles.FeeStructOutput[];
  };
}

export interface ProfilesInterface extends utils.Interface {
  contractName: "Profiles";
  functions: {
    "accountsAddress()": FunctionFragment;
    "addFee(string,uint256)": FunctionFragment;
    "addProfile(string)": FunctionFragment;
    "deleteFee(uint256)": FunctionFragment;
    "getFee(uint256)": FunctionFragment;
    "getFees()": FunctionFragment;
    "getProfile(address)": FunctionFragment;
    "kill()": FunctionFragment;
    "profiles(address)": FunctionFragment;
    "updateFee(string,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accountsAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addFee",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "addProfile", values: [string]): string;
  encodeFunctionData(
    functionFragment: "deleteFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getFees", values?: undefined): string;
  encodeFunctionData(functionFragment: "getProfile", values: [string]): string;
  encodeFunctionData(functionFragment: "kill", values?: undefined): string;
  encodeFunctionData(functionFragment: "profiles", values: [string]): string;
  encodeFunctionData(
    functionFragment: "updateFee",
    values: [string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "accountsAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addProfile", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deleteFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getFees", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getProfile", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "kill", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "profiles", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateFee", data: BytesLike): Result;

  events: {
    "ProfileAdded(address)": EventFragment;
    "ProfileUpdated(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ProfileAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProfileUpdated"): EventFragment;
}

export type ProfileAddedEvent = TypedEvent<[string], { user: string }>;

export type ProfileAddedEventFilter = TypedEventFilter<ProfileAddedEvent>;

export type ProfileUpdatedEvent = TypedEvent<[string], { user: string }>;

export type ProfileUpdatedEventFilter = TypedEventFilter<ProfileUpdatedEvent>;

export interface Profiles extends BaseContract {
  contractName: "Profiles";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ProfilesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accountsAddress(overrides?: CallOverrides): Promise<[string]>;

    addFee(
      doc: string,
      cost: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addProfile(
      photoURL: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deleteFee(
      _index: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getFee(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[Profiles.FeeStructOutput] & { fee: Profiles.FeeStructOutput }>;

    getFees(
      overrides?: CallOverrides
    ): Promise<
      [Profiles.FeeStructOutput[]] & { fees: Profiles.FeeStructOutput[] }
    >;

    getProfile(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[Profiles.ProfileStructOutput]>;

    kill(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    profiles(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        displayName: string;
        email: string;
        photoURL: string;
      }
    >;

    updateFee(
      doc: string,
      cost: BigNumberish,
      _index: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  accountsAddress(overrides?: CallOverrides): Promise<string>;

  addFee(
    doc: string,
    cost: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addProfile(
    photoURL: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deleteFee(
    _index: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getFee(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<Profiles.FeeStructOutput>;

  getFees(overrides?: CallOverrides): Promise<Profiles.FeeStructOutput[]>;

  getProfile(
    _address: string,
    overrides?: CallOverrides
  ): Promise<Profiles.ProfileStructOutput>;

  kill(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  profiles(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string] & {
      displayName: string;
      email: string;
      photoURL: string;
    }
  >;

  updateFee(
    doc: string,
    cost: BigNumberish,
    _index: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    accountsAddress(overrides?: CallOverrides): Promise<string>;

    addFee(
      doc: string,
      cost: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    addProfile(photoURL: string, overrides?: CallOverrides): Promise<boolean>;

    deleteFee(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getFee(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<Profiles.FeeStructOutput>;

    getFees(overrides?: CallOverrides): Promise<Profiles.FeeStructOutput[]>;

    getProfile(
      _address: string,
      overrides?: CallOverrides
    ): Promise<Profiles.ProfileStructOutput>;

    kill(overrides?: CallOverrides): Promise<void>;

    profiles(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        displayName: string;
        email: string;
        photoURL: string;
      }
    >;

    updateFee(
      doc: string,
      cost: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "ProfileAdded(address)"(user?: null): ProfileAddedEventFilter;
    ProfileAdded(user?: null): ProfileAddedEventFilter;

    "ProfileUpdated(address)"(user?: null): ProfileUpdatedEventFilter;
    ProfileUpdated(user?: null): ProfileUpdatedEventFilter;
  };

  estimateGas: {
    accountsAddress(overrides?: CallOverrides): Promise<BigNumber>;

    addFee(
      doc: string,
      cost: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addProfile(
      photoURL: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deleteFee(
      _index: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getFee(_index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getFees(overrides?: CallOverrides): Promise<BigNumber>;

    getProfile(_address: string, overrides?: CallOverrides): Promise<BigNumber>;

    kill(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    profiles(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    updateFee(
      doc: string,
      cost: BigNumberish,
      _index: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accountsAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addFee(
      doc: string,
      cost: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addProfile(
      photoURL: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deleteFee(
      _index: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getFee(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProfile(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    kill(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    profiles(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateFee(
      doc: string,
      cost: BigNumberish,
      _index: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
