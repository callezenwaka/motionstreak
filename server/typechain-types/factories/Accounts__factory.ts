/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Accounts, AccountsInterface } from "../Accounts";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "AccountAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "AccountDeleted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "AccountUpdated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "accounts",
    outputs: [
      {
        internalType: "string",
        name: "displayName",
        type: "string",
      },
      {
        internalType: "string",
        name: "phoneNumber",
        type: "string",
      },
      {
        internalType: "string",
        name: "email",
        type: "string",
      },
      {
        internalType: "string",
        name: "photoURL",
        type: "string",
      },
      {
        internalType: "address",
        name: "affiliate",
        type: "address",
      },
      {
        internalType: "bool",
        name: "isTenant",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "isActive",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "isActivated",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
      {
        internalType: "string",
        name: "displayName",
        type: "string",
      },
      {
        internalType: "string",
        name: "email",
        type: "string",
      },
      {
        internalType: "string",
        name: "phoneNumber",
        type: "string",
      },
      {
        internalType: "bool",
        name: "_isTenant",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "isActivated",
        type: "bool",
      },
    ],
    name: "addAccount",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    name: "getAccount",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "displayName",
            type: "string",
          },
          {
            internalType: "string",
            name: "phoneNumber",
            type: "string",
          },
          {
            internalType: "string",
            name: "email",
            type: "string",
          },
          {
            internalType: "string",
            name: "photoURL",
            type: "string",
          },
          {
            internalType: "address",
            name: "affiliate",
            type: "address",
          },
          {
            internalType: "bool",
            name: "isTenant",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isActive",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isActivated",
            type: "bool",
          },
        ],
        internalType: "struct Accounts.Account",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "kill",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
      {
        internalType: "string",
        name: "displayName",
        type: "string",
      },
      {
        internalType: "string",
        name: "email",
        type: "string",
      },
      {
        internalType: "string",
        name: "phoneNumber",
        type: "string",
      },
      {
        internalType: "bool",
        name: "isActive",
        type: "bool",
      },
    ],
    name: "updateAccount",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611780806100606000396000f3fe60806040526004361061004a5760003560e01c806331c27ae41461004f57806341c0e1b51461007f5780635e5c06e2146100895780636163919e146100cd578063fbcbc0f1146100fd575b600080fd5b6100696004803603810190610064919061107a565b61013a565b60405161007691906113de565b60405180910390f35b610087610441565b005b34801561009557600080fd5b506100b060048036038101906100ab9190611051565b610508565b6040516100c49897969594939291906113f9565b60405180910390f35b6100e760048036038101906100e29190611139565b6107b7565b6040516100f491906113de565b60405180910390f35b34801561010957600080fd5b50610124600480360381019061011f9190611051565b610a92565b60405161013191906114d3565b60405180910390f35b600033600073ffffffffffffffffffffffffffffffffffffffff16600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561020f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610206906114b3565b60405180910390fd5b7fe7b1fae3a790ceab07642c09617df79428b02832cd512bbfdd4db50272dcdf308760405161023e91906113c3565b60405180910390a185600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001908051906020019061029c929190610ebb565b5084600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020190805190602001906102f3929190610ebb565b5083600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101908051906020019061034a929190610ebb565b50600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160149054906101000a900460ff1680156103d357503373ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614155b156104335782600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160156101000a81548160ff0219169083151502179055505b600191505095945050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c690611493565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b600160205280600052604060002060009150905080600001805461052b906115f8565b80601f0160208091040260200160405190810160405280929190818152602001828054610557906115f8565b80156105a45780601f10610579576101008083540402835291602001916105a4565b820191906000526020600020905b81548152906001019060200180831161058757829003601f168201915b5050505050908060010180546105b9906115f8565b80601f01602080910402602001604051908101604052809291908181526020018280546105e5906115f8565b80156106325780601f1061060757610100808354040283529160200191610632565b820191906000526020600020905b81548152906001019060200180831161061557829003601f168201915b505050505090806002018054610647906115f8565b80601f0160208091040260200160405190810160405280929190818152602001828054610673906115f8565b80156106c05780601f10610695576101008083540402835291602001916106c0565b820191906000526020600020905b8154815290600101906020018083116106a357829003601f168201915b5050505050908060030180546106d5906115f8565b80601f0160208091040260200160405190810160405280929190818152602001828054610701906115f8565b801561074e5780601f106107235761010080835404028352916020019161074e565b820191906000526020600020905b81548152906001019060200180831161073157829003601f168201915b5050505050908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040160149054906101000a900460ff16908060040160159054906101000a900460ff16908060040160169054906101000a900460ff16905088565b60007f8f42195a0bbfa58954be4349deb9efc38bdb9c298e529f705f8bc1e38bce0399876040516107e891906113c3565b60405180910390a185600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000019080519060200190610846929190610ebb565b5084600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201908051906020019061089d929190610ebb565b5083600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010190805190602001906108f4929190610ebb565b5082600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160146101000a81548160ff02191690831515021790555081600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160166101000a81548160ff02191690831515021790555060018060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160156101000a81548160ff02191690831515021790555033600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600190509695505050505050565b610a9a610f41565b81600073ffffffffffffffffffffffffffffffffffffffff16600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610b6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b64906114b3565b60405180910390fd5b610b75610f41565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180610100016040529081600082018054610bd0906115f8565b80601f0160208091040260200160405190810160405280929190818152602001828054610bfc906115f8565b8015610c495780601f10610c1e57610100808354040283529160200191610c49565b820191906000526020600020905b815481529060010190602001808311610c2c57829003601f168201915b50505050508152602001600182018054610c62906115f8565b80601f0160208091040260200160405190810160405280929190818152602001828054610c8e906115f8565b8015610cdb5780601f10610cb057610100808354040283529160200191610cdb565b820191906000526020600020905b815481529060010190602001808311610cbe57829003601f168201915b50505050508152602001600282018054610cf4906115f8565b80601f0160208091040260200160405190810160405280929190818152602001828054610d20906115f8565b8015610d6d5780601f10610d4257610100808354040283529160200191610d6d565b820191906000526020600020905b815481529060010190602001808311610d5057829003601f168201915b50505050508152602001600382018054610d86906115f8565b80601f0160208091040260200160405190810160405280929190818152602001828054610db2906115f8565b8015610dff5780601f10610dd457610100808354040283529160200191610dff565b820191906000526020600020905b815481529060010190602001808311610de257829003601f168201915b505050505081526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160149054906101000a900460ff161515151581526020016004820160159054906101000a900460ff161515151581526020016004820160169054906101000a900460ff16151515158152505090508092505050919050565b828054610ec7906115f8565b90600052602060002090601f016020900481019282610ee95760008555610f30565b82601f10610f0257805160ff1916838001178555610f30565b82800160010185558215610f30579182015b82811115610f2f578251825591602001919060010190610f14565b5b509050610f3d9190610fa2565b5090565b60405180610100016040528060608152602001606081526020016060815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000151581526020016000151581526020016000151581525090565b5b80821115610fbb576000816000905550600101610fa3565b5090565b6000610fd2610fcd8461151a565b6114f5565b905082815260208101848484011115610fea57600080fd5b610ff58482856115b6565b509392505050565b60008135905061100c8161171c565b92915050565b60008135905061102181611733565b92915050565b600082601f83011261103857600080fd5b8135611048848260208601610fbf565b91505092915050565b60006020828403121561106357600080fd5b600061107184828501610ffd565b91505092915050565b600080600080600060a0868803121561109257600080fd5b60006110a088828901610ffd565b955050602086013567ffffffffffffffff8111156110bd57600080fd5b6110c988828901611027565b945050604086013567ffffffffffffffff8111156110e657600080fd5b6110f288828901611027565b935050606086013567ffffffffffffffff81111561110f57600080fd5b61111b88828901611027565b925050608061112c88828901611012565b9150509295509295909350565b60008060008060008060c0878903121561115257600080fd5b600061116089828a01610ffd565b965050602087013567ffffffffffffffff81111561117d57600080fd5b61118989828a01611027565b955050604087013567ffffffffffffffff8111156111a657600080fd5b6111b289828a01611027565b945050606087013567ffffffffffffffff8111156111cf57600080fd5b6111db89828a01611027565b93505060806111ec89828a01611012565b92505060a06111fd89828a01611012565b9150509295509295509295565b61121381611578565b82525050565b61122281611578565b82525050565b6112318161158a565b82525050565b6112408161158a565b82525050565b60006112518261154b565b61125b8185611556565b935061126b8185602086016115c5565b611274816116b9565b840191505092915050565b600061128a8261154b565b6112948185611567565b93506112a48185602086016115c5565b6112ad816116b9565b840191505092915050565b60006112c5600d83611567565b91506112d0826116ca565b602082019050919050565b60006112e8601383611567565b91506112f3826116f3565b602082019050919050565b600061010083016000830151848203600086015261131c8282611246565b915050602083015184820360208601526113368282611246565b915050604083015184820360408601526113508282611246565b9150506060830151848203606086015261136a8282611246565b915050608083015161137f608086018261120a565b5060a083015161139260a0860182611228565b5060c08301516113a560c0860182611228565b5060e08301516113b860e0860182611228565b508091505092915050565b60006020820190506113d86000830184611219565b92915050565b60006020820190506113f36000830184611237565b92915050565b6000610100820190508181036000830152611414818b61127f565b90508181036020830152611428818a61127f565b9050818103604083015261143c818961127f565b90508181036060830152611450818861127f565b905061145f6080830187611219565b61146c60a0830186611237565b61147960c0830185611237565b61148660e0830184611237565b9998505050505050505050565b600060208201905081810360008301526114ac816112b8565b9050919050565b600060208201905081810360008301526114cc816112db565b9050919050565b600060208201905081810360008301526114ed81846112fe565b905092915050565b60006114ff611510565b905061150b828261162a565b919050565b6000604051905090565b600067ffffffffffffffff8211156115355761153461168a565b5b61153e826116b9565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600061158382611596565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b82818337600083830152505050565b60005b838110156115e35780820151818401526020810190506115c8565b838111156115f2576000848401525b50505050565b6000600282049050600182168061161057607f821691505b602082108114156116245761162361165b565b5b50919050565b611633826116b9565b810181811067ffffffffffffffff821117156116525761165161168a565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f556e617574686f72697365642e00000000000000000000000000000000000000600082015250565b7f556e617574686f72697365642041636365737300000000000000000000000000600082015250565b61172581611578565b811461173057600080fd5b50565b61173c8161158a565b811461174757600080fd5b5056fea2646970667358221220b4153a03054f951316b39c50a5f8d85e2f6f613c7e3ce6d18f9f90e2ec73abc564736f6c63430008040033";

type AccountsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AccountsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Accounts__factory extends ContractFactory {
  constructor(...args: AccountsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Accounts";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Accounts> {
    return super.deploy(overrides || {}) as Promise<Accounts>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Accounts {
    return super.attach(address) as Accounts;
  }
  connect(signer: Signer): Accounts__factory {
    return super.connect(signer) as Accounts__factory;
  }
  static readonly contractName: "Accounts";
  public readonly contractName: "Accounts";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AccountsInterface {
    return new utils.Interface(_abi) as AccountsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Accounts {
    return new Contract(address, _abi, signerOrProvider) as Accounts;
  }
}
