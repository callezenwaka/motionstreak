/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Accounts, AccountsInterface } from "../Accounts";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "Registered",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "accounts",
    outputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "email",
        type: "string",
      },
      {
        internalType: "string",
        name: "avatar",
        type: "string",
      },
      {
        internalType: "address",
        name: "affiliate",
        type: "address",
      },
      {
        internalType: "string",
        name: "description",
        type: "string",
      },
      {
        internalType: "string",
        name: "entity",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "string",
            name: "doc",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "cost",
            type: "uint256",
          },
        ],
        internalType: "struct Accounts.Fee",
        name: "_fee",
        type: "tuple",
      },
    ],
    name: "addFee",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "deleteFee",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    name: "getAccount",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "string",
            name: "email",
            type: "string",
          },
          {
            internalType: "string",
            name: "avatar",
            type: "string",
          },
          {
            internalType: "address",
            name: "affiliate",
            type: "address",
          },
          {
            internalType: "string",
            name: "description",
            type: "string",
          },
          {
            internalType: "string",
            name: "entity",
            type: "string",
          },
          {
            components: [
              {
                internalType: "string",
                name: "doc",
                type: "string",
              },
              {
                internalType: "uint256",
                name: "cost",
                type: "uint256",
              },
            ],
            internalType: "struct Accounts.Fee[]",
            name: "fees",
            type: "tuple[]",
          },
        ],
        internalType: "struct Accounts.Account",
        name: "_account",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    name: "getAffiliate",
    outputs: [
      {
        internalType: "address",
        name: "affiliate",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "getFee",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "doc",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "cost",
            type: "uint256",
          },
        ],
        internalType: "struct Accounts.Fee",
        name: "fee",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getFees",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "doc",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "cost",
            type: "uint256",
          },
        ],
        internalType: "struct Accounts.Fee[]",
        name: "fees",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "kill",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_email",
        type: "string",
      },
      {
        internalType: "string",
        name: "_avatar",
        type: "string",
      },
      {
        internalType: "address",
        name: "_affiliate",
        type: "address",
      },
      {
        internalType: "string",
        name: "_description",
        type: "string",
      },
      {
        internalType: "string",
        name: "_entity",
        type: "string",
      },
      {
        components: [
          {
            internalType: "string",
            name: "doc",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "cost",
            type: "uint256",
          },
        ],
        internalType: "struct Accounts.Fee",
        name: "_fee",
        type: "tuple",
      },
    ],
    name: "register",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "string",
            name: "doc",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "cost",
            type: "uint256",
          },
        ],
        internalType: "struct Accounts.Fee",
        name: "_fee",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "updateFee",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612243806100606000396000f3fe6080604052600436106100915760003560e01c80639dc337ff116100595780639dc337ff14610143578063bc019eed1461015f578063db8d55f11461019c578063fbcbc0f1146101c7578063fcee45f41461020457610091565b80631330af621461009657806341c0e1b5146100b25780635e5c06e2146100c95780638a2ef6601461010b57806395ef86f614610127575b600080fd5b6100b060048036038101906100ab91906117fe565b610241565b005b3480156100be57600080fd5b506100c7610612565b005b3480156100d557600080fd5b506100f060048036038101906100eb91906117ac565b6106a1565b60405161010296959493929190611d7b565b60405180910390f35b6101256004803603810190610120919061196d565b6109a5565b005b610141600480360381019061013c91906119c1565b610a5c565b005b61015d6004803603810190610158919061192c565b610cc3565b005b34801561016b57600080fd5b50610186600480360381019061018191906117ac565b610d5b565b6040516101939190611d1c565b60405180910390f35b3480156101a857600080fd5b506101b1610dc7565b6040516101be9190611d37565b60405180910390f35b3480156101d357600080fd5b506101ee60048036038101906101e991906117ac565b610f02565b6040516101fb9190611e1f565b60405180910390f35b34801561021057600080fd5b5061022b600480360381019061022691906119c1565b611386565b6040516102389190611e41565b60405180910390f35b8573__$44dd8c104fbe78d3febc1d1b4583ece83e$";

type AccountsConstructorParams =
  | [linkLibraryAddresses: AccountsLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AccountsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class Accounts__factory extends ContractFactory {
  constructor(...args: AccountsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(_abi, Accounts__factory.linkBytecode(linkLibraryAddresses), signer);
    }
    this.contractName = "Accounts";
  }

  static linkBytecode(linkLibraryAddresses: AccountsLibraryAddresses): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$44dd8c104fbe78d3febc1d1b4583ece83e\\$__", "g"),
      linkLibraryAddresses["contracts/EmailRegex.sol:EmailRegex"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Accounts> {
    return super.deploy(overrides || {}) as Promise<Accounts>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Accounts {
    return super.attach(address) as Accounts;
  }
  connect(signer: Signer): Accounts__factory {
    return super.connect(signer) as Accounts__factory;
  }
  static readonly contractName: "Accounts";
  public readonly contractName: "Accounts";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AccountsInterface {
    return new utils.Interface(_abi) as AccountsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Accounts {
    return new Contract(address, _abi, signerOrProvider) as Accounts;
  }
}

export interface AccountsLibraryAddresses {
  ["contracts/EmailRegex.sol:EmailRegex"]: string;
}
